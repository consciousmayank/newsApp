// Mocks generated by Mockito 5.1.0 from annotations
// in news_app_mayank/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:news_app_mayank/data_classes/new_articles.dart' as _i3;
import 'package:news_app_mayank/enums/category.dart' as _i13;
import 'package:news_app_mayank/enums/search_in.dart' as _i12;
import 'package:news_app_mayank/enums/sort_by.dart' as _i11;
import 'package:news_app_mayank/services/database_service.dart' as _i14;
import 'package:news_app_mayank/services/dio_client_service.dart' as _i9;
import 'package:news_app_mayank/services/material_app_service_service.dart'
    as _i7;
import 'package:news_app_mayank/services/material_theme_service_service.dart'
    as _i8;
import 'package:news_app_mayank/services/network_api_service.dart' as _i10;
import 'package:stacked_services/stacked_services.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeThemeData_0 extends _i1.Fake implements _i2.ThemeData {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeNewsArticles_1 extends _i1.Fake implements _i3.NewsArticles {}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i4.NavigationService {
  @override
  bool back<T>({dynamic result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);

  @override
  _i5.Future<T?>? clearStackAndShow<T>(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i5.Future<T?>?);

  @override
  _i5.Future<T?>? clearTillFirstAndShow<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i5.Future<T?>?);

  @override
  _i5.Future<T?>? clearTillFirstAndShowView<T>(_i2.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i5.Future<T?>?);

  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          _i4.Transition? defaultTransitionStyle,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);

  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);

  @override
  _i5.Future<T?>? navigateTo<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i5.Future<T?>?);

  @override
  _i5.Future<T?>? navigateToView<T>(_i2.Widget? view,
          {dynamic arguments,
          int? id,
          bool? opaque,
          _i2.Curve? curve,
          Duration? duration,
          bool? fullscreenDialog = false,
          bool? popGesture,
          bool? preventDuplicates = true,
          _i4.Transition? transition,
          _i4.Transition? transitionStyle}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #opaque: opaque,
        #curve: curve,
        #duration: duration,
        #fullscreenDialog: fullscreenDialog,
        #popGesture: popGesture,
        #preventDuplicates: preventDuplicates,
        #transition: transition,
        #transitionStyle: transitionStyle
      })) as _i5.Future<T?>?);

  @override
  _i5.Future<T?>? navigateWithTransition<T>(_i2.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i2.Curve? curve,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i4.Transition? transitionClass,
          _i4.Transition? transitionStyle}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass,
        #transitionStyle: transitionStyle
      })) as _i5.Future<T?>?);

  @override
  _i2.GlobalKey<_i2.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i2.GlobalKey<_i2.NavigatorState>?);

  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);

  @override
  void popUntil(_i2.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);

  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);

  @override
  _i5.Future<T?>? pushNamedAndRemoveUntil<T>(String? routeName,
          {_i2.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i5.Future<T?>?);

  @override
  _i5.Future<T?>? replaceWith<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i5.Future<T?>?);

  @override
  _i5.Future<T?>? replaceWithTransition<T>(_i2.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i2.Curve? curve,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i4.Transition? transitionClass,
          _i4.Transition? transitionStyle}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass,
        #transitionStyle: transitionStyle
      })) as _i5.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i4.BottomSheetService {
  @override
  _i5.Future<_i4.SheetResponse<T>?> showCustomSheet<T, R>(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i6.Color? barrierColor = const _i6.Color(2315255808),
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          String? barrierLabel = r'',
          dynamic customData,
          R? data,
          bool? enableDrag = true,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration,
          bool? ignoreSafeArea,
          bool? useRootNavigator = false}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomSheet, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #data: data,
                #enableDrag: enableDrag,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration,
                #ignoreSafeArea: ignoreSafeArea,
                #useRootNavigator: useRootNavigator
              }),
              returnValue: Future<_i4.SheetResponse<T>?>.value())
          as _i5.Future<_i4.SheetResponse<T>?>);

  @override
  void completeSheet(_i4.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#completeSheet, [response]),
          returnValueForMissingStub: null);

  @override
  void setCustomSheetBuilders(Map<dynamic, _i4.SheetBuilder>? builders) =>
      super.noSuchMethod(Invocation.method(#setCustomSheetBuilders, [builders]),
          returnValueForMissingStub: null);

  @override
  _i5.Future<_i4.SheetResponse<dynamic>?> showBottomSheet(
          {String? title,
          String? description,
          String? confirmButtonTitle = r'Ok',
          String? cancelButtonTitle,
          bool? enableDrag = true,
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration,
          bool? ignoreSafeArea,
          bool? useRootNavigator = false}) =>
      (super.noSuchMethod(
              Invocation.method(#showBottomSheet, [], {
                #title: title,
                #description: description,
                #confirmButtonTitle: confirmButtonTitle,
                #cancelButtonTitle: cancelButtonTitle,
                #enableDrag: enableDrag,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration,
                #ignoreSafeArea: ignoreSafeArea,
                #useRootNavigator: useRootNavigator
              }),
              returnValue: Future<_i4.SheetResponse<dynamic>?>.value())
          as _i5.Future<_i4.SheetResponse<dynamic>?>);
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i4.DialogService {
  @override
  _i5.Future<_i4.DialogResponse<T>?> showCustomDialog<T, R>(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i6.Color? barrierColor = const _i6.Color(2315255808),
          bool? barrierDismissible = false,
          String? barrierLabel = r'',
          dynamic customData,
          R? data}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomDialog, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #data: data
              }),
              returnValue: Future<_i4.DialogResponse<T>?>.value())
          as _i5.Future<_i4.DialogResponse<T>?>);

  @override
  void completeDialog(_i4.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#completeDialog, [response]),
          returnValueForMissingStub: null);

  @override
  void registerCustomDialogBuilder(
          {dynamic variant,
          _i2.Widget Function(_i2.BuildContext, _i4.DialogRequest<dynamic>,
                  dynamic Function(_i4.DialogResponse<dynamic>))?
              builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);

  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i4.DialogBuilder>? builders) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilders, [builders]),
          returnValueForMissingStub: null);

  @override
  _i5.Future<_i4.DialogResponse<dynamic>?> showConfirmationDialog(
          {String? title,
          String? description,
          String? cancelTitle = r'Cancel',
          String? confirmationTitle = r'Ok',
          bool? barrierDismissible = false,
          _i4.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showConfirmationDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #confirmationTitle: confirmationTitle,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i4.DialogResponse<dynamic>?>.value())
          as _i5.Future<_i4.DialogResponse<dynamic>?>);

  @override
  _i5.Future<_i4.DialogResponse<dynamic>?> showDialog(
          {String? title,
          String? description,
          String? cancelTitle,
          _i6.Color? cancelTitleColor,
          String? buttonTitle = r'Ok',
          _i6.Color? buttonTitleColor,
          bool? barrierDismissible = false,
          _i4.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #cancelTitleColor: cancelTitleColor,
                #buttonTitle: buttonTitle,
                #buttonTitleColor: buttonTitleColor,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i4.DialogResponse<dynamic>?>.value())
          as _i5.Future<_i4.DialogResponse<dynamic>?>);
}

/// A class which mocks [MaterialAppServiceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaterialAppServiceService extends _i1.Mock
    implements _i7.MaterialAppServiceService {
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);

  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);

  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);

  @override
  set subscription(_i5.StreamSubscription<dynamic>? _subscription) =>
      super.noSuchMethod(Invocation.setter(#subscription, _subscription),
          returnValueForMissingStub: null);
}

/// A class which mocks [MaterialThemeServiceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaterialThemeServiceService extends _i1.Mock
    implements _i8.MaterialThemeServiceService {
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);

  @override
  List<_i6.Color> get colorOptions =>
      (super.noSuchMethod(Invocation.getter(#colorOptions),
          returnValue: <_i6.Color>[]) as List<_i6.Color>);

  @override
  int get colorSelected =>
      (super.noSuchMethod(Invocation.getter(#colorSelected), returnValue: 0)
          as int);

  @override
  List<String> get colorText => (super
          .noSuchMethod(Invocation.getter(#colorText), returnValue: <String>[])
      as List<String>);

  @override
  void handleBrightnessChange() =>
      super.noSuchMethod(Invocation.method(#handleBrightnessChange, []),
          returnValueForMissingStub: null);

  @override
  void handleColorSelect(int? value) =>
      super.noSuchMethod(Invocation.method(#handleColorSelect, [value]),
          returnValueForMissingStub: null);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);

  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);

  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);

  @override
  _i2.ThemeData get themeData =>
      (super.noSuchMethod(Invocation.getter(#themeData),
          returnValue: _FakeThemeData_0()) as _i2.ThemeData);

  @override
  _i2.ThemeData updateThemes(
          int? colorIndex, bool? useMaterial3, bool? useLightMode) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateThemes, [colorIndex, useMaterial3, useLightMode]),
          returnValue: _FakeThemeData_0()) as _i2.ThemeData);
}

/// A class which mocks [DioClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClientService extends _i1.Mock implements _i9.DioClientService {}

/// A class which mocks [NetworkApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkApiService extends _i1.Mock implements _i10.NetworkApiService {
  @override
  _i5.Future<_i3.NewsArticles> getEverything(
          {int? page,
          int? pageSize,
          String? query,
          List<String>? sources = const [],
          _i11.SortBy? sortBy = _i11.SortBy.publishedAt,
          List<_i12.SearchIn>? searchIn = const []}) =>
      (super.noSuchMethod(
              Invocation.method(#getEverything, [], {
                #page: page,
                #pageSize: pageSize,
                #query: query,
                #sources: sources,
                #sortBy: sortBy,
                #searchIn: searchIn
              }),
              returnValue:
                  Future<_i3.NewsArticles>.value(_FakeNewsArticles_1()))
          as _i5.Future<_i3.NewsArticles>);

  @override
  _i5.Future<_i3.NewsArticles> getTopHeadlines({
    _i13.Category? category = _i13.Category.all,
    List<String>? sources = const [],
    int? page,
    int? pageSize,
    String? query,
    required String country,
  }) =>
      (super.noSuchMethod(
              Invocation.method(#getTopHeadlines, [], {
                #category: category,
                #sources: sources,
                #page: page,
                #pageSize: pageSize,
                #query: query
              }),
              returnValue:
                  Future<_i3.NewsArticles>.value(_FakeNewsArticles_1()))
          as _i5.Future<_i3.NewsArticles>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i14.DatabaseService {
  @override
  _i5.Future<List<_i3.Article>> getSavedArticles() =>
      (super.noSuchMethod(Invocation.method(#getSavedArticles, []),
              returnValue: Future<List<_i3.Article>>.value(<_i3.Article>[]))
          as _i5.Future<List<_i3.Article>>);

  @override
  _i5.Future<int?> insertArticle(_i3.Article? singleArticle) =>
      (super.noSuchMethod(Invocation.method(#insertArticle, [singleArticle]),
          returnValue: Future<int?>.value()) as _i5.Future<int?>);
}
